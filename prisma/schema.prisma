// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")  // pooled (PgBouncer)
  directUrl = env("DIRECT_URL")    // direct (migrate/Studio)
}

model Portfolio {
  id          String     @id @default(cuid())
  key         String     @unique   // "cortex" | "solutions" | "launchpad" | "fisher"
  name        String
  color       String?              // e.g. "#5B67F1"
  description String?
  order       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  projects    Project[]
}

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String     @unique
  emailVerified  DateTime?
  password       String?    // For credentials provider
  image          String?
  avatar         String?
  role           String     @default("user") // "admin" | "pm" | "developer" | "client" | "user"
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  
  accounts       Account[]
  sessions       Session[]
  projectsAsPM   Project[]  @relation("ProjectPM")
  projectsAsDev  Project[]  @relation("ProjectDevs")
  tasks          Task[]
  updates        Update[]
  timeEntries    TimeEntry[]
  savedViews     SavedView[]
  auditLogs      AuditLog[]
  integrationCredentials IntegrationCredential[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id               String       @id @default(cuid())
  title            String
  branch           String       // Legacy field - keeping for compatibility
  portfolioId      String?      // New portfolio relation
  portfolio        Portfolio?   @relation(fields: [portfolioId], references: [id])
  stage            String       @default("Discovery") // Discovery | Build | Launch | Live
  health           String?      // Green | Amber | Red
  pmId             String
  pm               User         @relation("ProjectPM", fields: [pmId], references: [id])
  developers       User[]       @relation("ProjectDevs")
  clientName       String
  clientEmail      String
  status           String       // Not Started, In Progress, Review, Blocked, Done
  startDate        DateTime?
  targetDelivery   DateTime?
  lastUpdatedAt    DateTime     @updatedAt
  notes            String?
  clientShareToken String       @unique @default(cuid())
  createdAt        DateTime     @default(now())
  archived         Boolean      @default(false)
  archivedAt       DateTime?
  
  tasks            Task[]
  updates          Update[]
  deliverables     Deliverable[]
  documents        Document[]
  
  @@index([portfolioId, stage, health])
  @@index([portfolioId, status])
}

model Task {
  id          String     @id @default(cuid())
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  title       String
  status      String     // Todo, Doing, Review, Done
  assigneeId  String?
  assignee    User?      @relation(fields: [assigneeId], references: [id])
  dueDate     DateTime?
  notes       String?
  order       Int        @default(0)
  estimatedHours Float?  // Estimated time in hours
  actualHours Float      @default(0) // Actual time spent in hours
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  timeEntries TimeEntry[]
}

model Update {
  id          String     @id @default(cuid())
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  body        String
  createdAt   DateTime   @default(now())
}

model Deliverable {
  id          String     @id @default(cuid())
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  title       String
  status      String     // Draft, Submitted, Approved, Revisions
  fileUrl     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model TimeEntry {
  id          String     @id @default(cuid())
  taskId      String
  task        Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  hours       Float      // Hours worked
  description String?    // What was done
  date        DateTime   // When the work was done
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model SavedView {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  viewType    String     // "projects" | "tasks" | "portfolio"
  filters     Json       // JSON object storing filter state
  sortBy      String?    // Sort field
  sortOrder   String?    // "asc" | "desc"
  isDefault   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@unique([userId, name, viewType])
  @@index([userId, viewType])
}

model AuditLog {
  id         String   @id @default(cuid())
  actorId    String
  actor      User     @relation(fields: [actorId], references: [id])
  action     String   // "create" | "update" | "delete" | "execute"
  targetType String   // "project" | "task" | "update" | "deliverable" | "agent_action"
  targetId   String?
  payload    Json     // JSON object with details of the action
  status     String   // "planned" | "executed" | "failed"
  error      String?  // Error message if status is "failed"
  createdAt  DateTime @default(now())
  
  @@index([actorId, createdAt])
  @@index([targetType, targetId])
}

model IntegrationCredential {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String   // "slack" | "gdrive" | "github"
  data      Json     // Encrypted credentials JSON
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, type])
  @@index([type, active])
}

model Document {
  id         String      @id @default(cuid())
  projectId  String
  project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  title      String
  source     String      // "slack" | "gdrive" | "upload" | "manual"
  sourceId   String?     // External ID from source system
  url        String?
  mimeType   String?
  size       Int?        // File size in bytes
  content    String?     @db.Text // Full text content for search
  metadata   Json?       // Additional metadata from source
  embeddings Embedding[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  
  @@index([projectId, source])
  @@index([sourceId])
}

model Embedding {
  id         String   @id @default(cuid())
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  chunkIndex Int      // Order of chunk in document
  text       String   @db.Text // Original text chunk
  vector     Float[]  // Vector embedding
  metadata   Json?    // Additional metadata (page number, section, etc)
  createdAt  DateTime @default(now())
  
  @@unique([documentId, chunkIndex])
  @@index([documentId])
}
