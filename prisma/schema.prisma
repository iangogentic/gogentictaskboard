// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")  // pooled (PgBouncer)
  directUrl = env("DIRECT_URL")    // direct (migrate/Studio)
}

model Portfolio {
  id          String     @id @default(cuid())
  key         String     @unique   // "cortex" | "solutions" | "launchpad" | "fisher"
  name        String
  color       String?              // e.g. "#5B67F1"
  description String?
  order       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  projects    Project[]
}

model User {
  id          String     @id @default(cuid())
  name        String
  email       String     @unique
  avatar      String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  projectsAsPM   Project[]  @relation("ProjectPM")
  projectsAsDev  Project[]  @relation("ProjectDevs")
  tasks          Task[]
  updates        Update[]
  timeEntries    TimeEntry[]
  savedViews     SavedView[]
}

model Project {
  id               String       @id @default(cuid())
  title            String
  branch           String       // Legacy field - keeping for compatibility
  portfolioId      String?      // New portfolio relation
  portfolio        Portfolio?   @relation(fields: [portfolioId], references: [id])
  stage            String       @default("Discovery") // Discovery | Build | Launch | Live
  health           String?      // Green | Amber | Red
  pmId             String
  pm               User         @relation("ProjectPM", fields: [pmId], references: [id])
  developers       User[]       @relation("ProjectDevs")
  clientName       String
  clientEmail      String
  status           String       // Not Started, In Progress, Review, Blocked, Done
  startDate        DateTime?
  targetDelivery   DateTime?
  lastUpdatedAt    DateTime     @updatedAt
  notes            String?
  clientShareToken String       @unique @default(cuid())
  createdAt        DateTime     @default(now())
  archived         Boolean      @default(false)
  archivedAt       DateTime?
  
  tasks            Task[]
  updates          Update[]
  deliverables     Deliverable[]
  
  @@index([portfolioId, stage, health])
  @@index([portfolioId, status])
}

model Task {
  id          String     @id @default(cuid())
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  title       String
  status      String     // Todo, Doing, Review, Done
  assigneeId  String?
  assignee    User?      @relation(fields: [assigneeId], references: [id])
  dueDate     DateTime?
  notes       String?
  order       Int        @default(0)
  estimatedHours Float?  // Estimated time in hours
  actualHours Float      @default(0) // Actual time spent in hours
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  timeEntries TimeEntry[]
}

model Update {
  id          String     @id @default(cuid())
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  body        String
  createdAt   DateTime   @default(now())
}

model Deliverable {
  id          String     @id @default(cuid())
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  title       String
  status      String     // Draft, Submitted, Approved, Revisions
  fileUrl     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model TimeEntry {
  id          String     @id @default(cuid())
  taskId      String
  task        Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  hours       Float      // Hours worked
  description String?    // What was done
  date        DateTime   // When the work was done
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model SavedView {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  viewType    String     // "projects" | "tasks" | "portfolio"
  filters     Json       // JSON object storing filter state
  sortBy      String?    // Sort field
  sortOrder   String?    // "asc" | "desc"
  isDefault   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@unique([userId, name, viewType])
  @@index([userId, viewType])
}
